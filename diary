#!/bin/bash

date_format=+%d-%b-%Y
ext="md"
file="$(date ${date_format}).${ext}"
entries="entries"
editor="vim"

err() {
  echo "ERROR: $@" >&2
  return 1
}

new_entry() {
  if [[ -f ${entries}.tar.gz.gpg ]]; then
    decrypt_entries
  elif [[ ! -d ${entries} ]]; then
    echo "Creating a new directory ${entries} ..."
    mkdir ${entries}
  fi
  echo "Creating A New Entry..."
  printf "\n#%s\n" "$(date +%H:%M)" >> "${entries}/${file}"
  ${editor} "${entries}/${file}"
}

encrypt_entries() {
  if [[ -f "${entries}.tar.gz.gpg" ]]; then
    err "${entries}.tar.gz.gpg already present."
  elif [[ ! -d "${entries}" ]]; then
    err "No Entries directory present to encrypt."
  elif [[ -z $(ls ${entries}/*.${ext}) ]]; then
    err "No unencrypted file present in entries directory"
  elif [[ ! -f "${entries}.tar.gz" ]]; then
    tar czf ${entries}.tar.gz ${entries}
  fi
  echo "Encrypting Diary Entries..."
  gpg -c ${entries}.tar.gz
  if [[ $? = 0 ]]; then
    rm -rf ${entries}.tar.gz ${entries}
  fi
}

decrypt_entries() {
  if [[ -d ${entries} ]]; then
    err "A decrypted ${entries} directory is already present"
  elif [[ ! -f ${entries}.tar.gz.gpg ]]; then
    err "Cannot find ${entries}.tar.gz.gpg"
  fi
  echo "Decrypting Diary Entries..."
  gpg -d ${entries}.tar.gz.gpg > ${entries}.tar.gz
  if [[ $? = 0 ]]; then
    tar xzf ${entries}.tar.gz
    rm -rf ${entries}.tar.gz.gpg ${entries}.tar.gz
  fi
}

if [[ -n $1 ]]; then
  if [[ $1 = "-e" ]]; then
    encrypt_entries
  elif [[ $1 = "-d" ]]; then
    decrypt_entries
  fi
  exit $?
fi

new_entry
encrypt_entries
