#!/bin/bash

readonly DATE_FORMAT=%d-%b-%Y
readonly TIME_FORMAT=%H:%M
readonly EXT="md"
readonly ENTRIES="$(pwd)/entries"
readonly EDITOR="vim"

usage() {
  cat <<END
Usage: $0 [-e] <date>
Manage an encrypted diary

Creates a new entry for today when no <date> is specified.

Options:
  -h           Show this screen

Note: <date> should look like $(date +${DATE_FORMAT}) or as specified in the DATE_FORMAT variable of the script.
END
  exit 2
}

err() {
  echo "ERROR: $@" >&2
  exit 1
}

precheck() {
  readonly REQUIRES=( "${EDITOR}" "gpg" )
  for prog in ${REQUIRES[$@]}; do
    if [[ -z "$(which ${prog})" ]]; then
      err "$prog not installed."
    fi
  done
  if ! [[ -d ${ENTRIES} ]]; then
    mkdir ${ENTRIES}
  fi
}

decrypt_entry() {
  local entry="$1"
  if ! [[ -e "${entry}.gpg" ]]; then
    err "${entry}.gpg does not exist."
  fi

  gpg -d "${entry}.gpg" > "${entry}"
  if [[ "$?" -ne "0" ]]; then
    err "Failed to decrypt ${entry}.gpg"
  fi
  rm "${entry}.gpg"
}

encrypt_entry() {
  local entry="$1"

  gpg -c "${entry}"
  if [[ "$?" -ne "0" ]]; then
    err "Failed to encrypt ${entry}"
  fi
  rm "${entry}"
}

edit_entry() {
  local entry="$1"
  local timestamp=$(date +"${DATE_FORMAT} ${TIME_FORMAT}") 
  if [[ -e "${entry}.gpg" ]]; then
    decrypt_entry "${entry}"
  fi
  
  printf "\n#%s\n" "${timestamp}" >> "${entry}"

  ${EDITOR} "${entry}"
  if [[ "$?" -ne "0" ]]; then
    err "Failed to save ${entry}"
  fi

  encrypt_entry "${entry}"
  exit 0
}

todays_entry() {
  local entry="${ENTRIES}/$(date "+${DATE_FORMAT}").${EXT}"
  edit_entry "${entry}"
}

main(){
  precheck
  local arg
  while getopts "h" arg; do
    case ${arg} in
      h) usage ;;
      ?) usage ;;
    esac
  done

  if [[ -z ${OPTARG} ]]; then
    todays_entry
  fi
}
main "$@"

